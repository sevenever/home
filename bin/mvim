#!/bin/sh
#
# This shell script passes all its arguments to the binary inside the
# MacVim.app application bundle.  If you make links to this script as view,
# gvim, etc., then it will peek at the name used to call it and set options
# appropriately.
#
case "$(uname -s)" in
  Darwin)
    VIM_APP_DIR=/Users/shaofeng/Applications
    binary="$VIM_APP_DIR/MacVim.app/Contents/MacOS/Vim"
    ;;
  Linux)
    binary=/usr/local/bin/gvim
    ;;
esac

# Next, peek at the name used to invoke this script, and set options
# accordingly.

name="`basename "$0"`"
gui=
opts=
front=

# GUI mode, implies forking
case "$name" in m*|g*|rm*|rg*) gui=true ;; esac

# Logged in over SSH? No gui.
if [ -n "${SSH_CONNECTION}" ]; then
	gui=
fi

# Restricted mode
case "$name" in r*) opts="$opts -Z";; esac

# vimdiff, view, and ex mode
case "$name" in
	*view)
		opts="$opts -R"
		;;
	*ex)
		opts="$opts -e"
		;;
    *gvim)
        front=true
        ;;
    *gvimdiff)
		opts="$opts -d"
        front=true
        ;;
esac

# Last step:  fire up vim.
# The program should fork by default when started in GUI mode, but it does
# not; we work around this when this script is invoked as "gvim" or "rgview"
# etc., but not when it is invoked as "vim -g".
if [ "$gui" ]; then
	# Note: this isn't perfect, because any error output goes to the
	# terminal instead of the console log.
	# But if you use open instead, you will need to fully qualify the
	# path names for any filenames you specify, which is hard.
    if [ "$front" ]; then
        exec "$binary" -f -g $opts ${1:+"$@"}
    else
        exec "$binary" -g $opts --remote-tab ${1:+"$@"}
    fi
else
	exec "$binary" $opts ${1:+"$@"}
fi
