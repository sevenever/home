" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"

if LINUX()
    nnoremap <C-Up> :silent! let &guifont = substitute( &guifont, '\zs\d\+', '\=eval(submatch(0)+1)', 'g')<CR>
    nnoremap <C-Down> :silent! let &guifont = substitute( &guifont, '\zs\d\+', '\=eval(submatch(0)-1)', 'g')<CR>
endif

nnoremap Q <nop>

set fileencodings=ucs-bom,utf-8,gb2312,gb18030,gbk,cp936,default,latin1

" for brookhong/cscope.vim
" ignore stat dir when build db for SLV
let g:cscope_ignored_dir = '/Users/shaofsh/SLV/workspaces/EasyTierWorkspace/src/user/sl/stat$\|/Users/shaofsh/SLV/ReadCode/src/sl/stat$\|/Users/shaofsh/SLV/workspaces/easyTierFuture/src/sl/stat$'

let g:tagbar_show_linenumbers = 0

set showtabline=0

if has('gui_running')
    let g:solarized_contrast = 'high'
    set antialias
    set guioptions-=m
    "set background=dark
    colorscheme solarized
    if LINUX()
        set guifont=DejaVu\ Sans\ Mono\ 10
    elseif OSX()
        set guifont=DejaVuSansMonoPowerline:h11
    endif
    set lines=70 columns=200
    "set fu
else
    set background=dark
    colorscheme cobalt2
endif

" key mappings {
" swap 0 and _ for programming
nnoremap 0 _
nnoremap _ 0
" restore C-e, which mapped by NerdTree
unmap <C-e>

"}

autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql setlocal nospell foldmethod=syntax

" disable bufferline in status line, to avoid conflict with airline
let g:airline#extensions#bufferline#enabled = 0

" display the number of window in statusline {
" https://github.com/vim-airline/vim-airline/issues/1572
function! WindowNumber(...)
    let builder = a:1
    let context = a:2
    call builder.add_section('airline_b', '%{tabpagewinnr(tabpagenr())}')
    return 0
endfunction
call airline#add_statusline_func('WindowNumber')
call airline#add_inactive_statusline_func('WindowNumber')
" }

" don't strip trailing whitespaces for all files I have my own autocmd for this {
let g:spf13_keep_trailing_whitespace = 1
"autocmd! FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql
" in SVC's directories, don't touch their ugly trailing whitespaces.
augroup TrailingSpaces
    autocmd!
    autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl,sql autocmd BufWritePre <buffer> if !exists('b:noStripWhitespace') | call StripTrailingWhitespace() | endif
augroup END
augroup SpecialProject
    autocmd!
    autocmd BufReadPost ~/github/aipoweredmarketer/tl-saas/** setlocal noexpandtab | let b:noStripWhitespace=1
augroup END
" }

" " cscope key mappings {
" " key mapping for cscope
" " C-@ not work on OSX due to spotlight
"     "
"     "   's'   symbol: find all references to the token under cursor
"     "   'g'   global: find global definition(s) of the token under cursor
"     "   'c'   calls:  find all calls to the function name under cursor
"     "   't'   text:   find all instances of the text under cursor
"     "   'e'   egrep:  egrep search for the word under cursor
"     "   'f'   file:   open the filename under cursor
"     "   'i'   includes: find files that include the filename under cursor
"     "   'd'   called: find functions that function under cursor calls
" nmap <C-\>s :scs find s <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>g :scs find g <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>c :scs find c <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>t :scs find t <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>e :scs find e <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-\>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-\>d :scs find d <C-R>=expand("<cword>")<CR><CR>
" 
" function! TrimJumpListAndCscopeFind(action, word)
"     if has('jumplist')
"         if exists('*trimjumplist')
"             let jl = getjumplist()
"             call trimjumplist(len(jl[0]) - str2nr(jl[1]))
"         endif
"     endif
"     call CscopeFind(a:action, a:word)
" endfunction
" 
" nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
" nnoremap <leader>ll :call ToggleLocationList()<CR>
" " s: Find this C symbol
" nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" " g: Find this definition
" nnoremap  <leader>fg :call TrimJumpListAndCscopeFind('g', expand('<cword>'))<CR>
" " d: Find functions called by this function
" nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
" " c: Find functions calling this function
" nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
" " t: Find this text string
" nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
" " e: Find this egrep pattern
" nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
" " f: Find this file
" nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
" " i: Find files #including this file
" nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
" " }

" " fix neocomplete's <CR> behaviour {
" if count(g:spf13_bundle_groups, 'neocomplete')
"     if !exists('g:spf13_noninvasive_completion')
"         function! CleverCr()
"             if pumvisible()
"                 if neosnippet#expandable()
"                     let exp = "\<Plug>(neosnippet_expand)"
"                     return exp . neocomplete#smart_close_popup()
"                 else
"                     return "\<C-y>"
"                     "return "\<C-y>\<CR>"
"                 endif
"             else
"                 return "\<CR>"
"             endif
"         endfunction
" 
"         " <CR> close popup and save indent or expand snippet
"         imap <expr> <CR> CleverCr()
"     endif
" endif
" "}

" key mappings for location list {
    nnoremap <leader>ln :lnext<CR>
    nnoremap <leader>lp :lprevious<CR>
" }


" C-S to save file {
" also need to set term to pass C-S to application by setting 
" stty -ixon in .zshrc or .bashrc
noremap <silent> <C-S>          :update<CR>
vnoremap <silent> <C-S>         <C-C>:update<CR>
inoremap <silent> <C-S>         <C-O>:update<CR>
" }

" coc.vim config {
    " TextEdit might fail if hidden is not set.
    set hidden

    " Some servers have issues with backup files, see #649.
    set nobackup
    set nowritebackup

    " Give more space for displaying messages.
    "set cmdheight=2

    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=300

    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c

    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    if has("patch-8.1.1564")
      " Recently vim can merge signcolumn and number column into one
      set signcolumn=number
    else
      set signcolumn=yes
    endif

    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> to trigger completion.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    else
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    " <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
    if exists('*complete_info')
      inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
      inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif

    " Use `[g` and `]g` to navigate diagnostics
    " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)

    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)

    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap keys for applying codeAction to the current buffer.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Map function and class text objects
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    omap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap af <Plug>(coc-funcobj-a)
    xmap ic <Plug>(coc-classobj-i)
    omap ic <Plug>(coc-classobj-i)
    xmap ac <Plug>(coc-classobj-a)
    omap ac <Plug>(coc-classobj-a)

    " Use CTRL-S for selections ranges.
    " Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
    "nmap <silent> <C-s> <Plug>(coc-range-select)
    "xmap <silent> <C-s> <Plug>(coc-range-select)

    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')

    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

    " Add (Neo)Vim's native statusline support.
    " NOTE: Please see `:h coc-status` for integrations with external plugins that
    " provide custom statusline: lightline.vim, vim-airline.
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

    " Mappings for CoCList
    " Show all diagnostics.
    nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions.
    nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
    " Show commands.
    nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document.
    nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols.
    nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list.
    nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }
